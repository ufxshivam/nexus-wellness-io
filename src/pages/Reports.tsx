import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import { reportsAPI, type Report } from '@/services/api';
import { FileText, Download, RefreshCw, Calendar, Filter } from 'lucide-react';
import { cn } from '@/lib/utils';

export default function Reports() {
  const [reports, setReports] = useState<Report[]>([]);
  const [loading, setLoading] = useState(true);
  const [downloading, setDownloading] = useState<string | null>(null);
  const { toast } = useToast();

  const fetchReports = async () => {
    try {
      setLoading(true);
      const response = await reportsAPI.getReports();
      setReports(response.data);
    } catch (error) {
      toast({
        title: 'Error fetching reports',
        description: 'Could not load reports data',
        variant: 'destructive',
      });
      
      // Mock data for demo
      const mockReports: Report[] = [
        {
          id: '1',
          title: 'Daily Water Quality Summary',
          description: 'Comprehensive analysis of water quality parameters for all monitoring locations',
          generatedAt: new Date().toISOString(),
          downloadUrl: '#',
          type: 'daily',
        },
        {
          id: '2',
          title: 'Weekly Trend Analysis',
          description: 'Weekly trends and patterns in pH, turbidity, and temperature measurements',
          generatedAt: new Date(Date.now() - 86400000).toISOString(),
          downloadUrl: '#',
          type: 'weekly',
        },
        {
          id: '3',
          title: 'Alert Activity Report',
          description: 'Summary of all system alerts and incidents from the past month',
          generatedAt: new Date(Date.now() - 172800000).toISOString(),
          downloadUrl: '#',
          type: 'alerts',
        },
        {
          id: '4',
          title: 'Monthly Compliance Report',
          description: 'Monthly compliance status report for regulatory requirements',
          generatedAt: new Date(Date.now() - 259200000).toISOString(),
          downloadUrl: '#',
          type: 'compliance',
        },
        {
          id: '5',
          title: 'System Performance Report',
          description: 'Performance metrics and uptime statistics for monitoring stations',
          generatedAt: new Date(Date.now() - 345600000).toISOString(),
          downloadUrl: '#',
          type: 'performance',
        },
      ];
      
      setReports(mockReports);
    } finally {
      setLoading(false);
    }
  };

  const handleDownload = async (report: Report) => {
    try {
      setDownloading(report.id);
      
      // In a real app, this would download the actual file
      // const response = await reportsAPI.downloadReport(report.id);
      
      // Mock download - create a simple text file
      const content = `${report.title}\n\nGenerated: ${new Date(report.generatedAt).toLocaleString()}\n\n${report.description}\n\nThis is a demo report generated by the Smart Health Monitoring System.`;
      const blob = new Blob([content], { type: 'text/plain' });
      const url = window.URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${report.title.replace(/\s+/g, '_')}_${report.id}.txt`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      window.URL.revokeObjectURL(url);
      
      toast({
        title: 'Download started',
        description: `${report.title} is being downloaded`,
      });
    } catch (error) {
      toast({
        title: 'Download failed',
        description: 'Could not download the report',
        variant: 'destructive',
      });
    } finally {
      setDownloading(null);
    }
  };

  useEffect(() => {
    fetchReports();
  }, []);

  const getReportTypeColor = (type: string) => {
    switch (type.toLowerCase()) {
      case 'daily':
        return 'bg-primary/10 text-primary border-primary/20';
      case 'weekly':
        return 'bg-secondary/10 text-secondary border-secondary/20';
      case 'alerts':
        return 'bg-status-warning/10 text-status-warning border-status-warning/20';
      case 'compliance':
        return 'bg-status-success/10 text-status-success border-status-success/20';
      case 'performance':
        return 'bg-accent/10 text-accent border-accent/20';
      default:
        return 'bg-muted/10 text-muted-foreground border-muted/20';
    }
  };

  const getReportIcon = (type: string) => {
    return <FileText className="h-4 w-4" />;
  };

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold tracking-tight">System Reports</h1>
          <p className="text-muted-foreground">
            Generate and download comprehensive monitoring reports
          </p>
        </div>
        <div className="flex items-center gap-2">
          <Button
            variant="outline"
            className="gap-2"
          >
            <Filter className="h-4 w-4" />
            Filter
          </Button>
          <Button
            onClick={fetchReports}
            disabled={loading}
            className="gap-2"
            variant="outline"
          >
            <RefreshCw className={cn("h-4 w-4", loading && "animate-spin")} />
            Refresh
          </Button>
        </div>
      </div>

      {/* Report Summary Cards */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <Card className="shadow-card">
          <CardContent className="p-6">
            <div className="flex items-center gap-4">
              <div className="p-3 bg-primary/10 rounded-lg">
                <FileText className="h-6 w-6 text-primary" />
              </div>
              <div>
                <p className="text-sm font-medium text-muted-foreground">Total Reports</p>
                <p className="text-2xl font-bold">{reports.length}</p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="shadow-card">
          <CardContent className="p-6">
            <div className="flex items-center gap-4">
              <div className="p-3 bg-secondary/10 rounded-lg">
                <Calendar className="h-6 w-6 text-secondary" />
              </div>
              <div>
                <p className="text-sm font-medium text-muted-foreground">This Week</p>
                <p className="text-2xl font-bold">
                  {reports.filter(r => new Date(r.generatedAt) > new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)).length}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="shadow-card">
          <CardContent className="p-6">
            <div className="flex items-center gap-4">
              <div className="p-3 bg-status-warning/10 rounded-lg">
                <FileText className="h-6 w-6 text-status-warning" />
              </div>
              <div>
                <p className="text-sm font-medium text-muted-foreground">Alert Reports</p>
                <p className="text-2xl font-bold">
                  {reports.filter(r => r.type === 'alerts').length}
                </p>
              </div>
            </div>
          </CardContent>
        </Card>

        <Card className="shadow-card">
          <CardContent className="p-6">
            <div className="flex items-center gap-4">
              <div className="p-3 bg-status-success/10 rounded-lg">
                <Download className="h-6 w-6 text-status-success" />
              </div>
              <div>
                <p className="text-sm font-medium text-muted-foreground">Downloads</p>
                <p className="text-2xl font-bold">143</p>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Reports List */}
      <Card className="shadow-card">
        <CardHeader>
          <CardTitle>Available Reports</CardTitle>
          <CardDescription>
            Download comprehensive reports and analytics
          </CardDescription>
        </CardHeader>
        <CardContent>
          {loading ? (
            <div className="flex items-center justify-center py-8">
              <RefreshCw className="h-6 w-6 animate-spin text-muted-foreground" />
            </div>
          ) : (
            <div className="space-y-4">
              {reports.map((report) => (
                <div
                  key={report.id}
                  className="flex items-center gap-4 p-4 border border-border rounded-lg hover:bg-muted/50 transition-colors"
                >
                  <div className="flex-shrink-0">
                    <div className="p-3 bg-gradient-card rounded-lg border border-border">
                      <FileText className="h-6 w-6 text-primary" />
                    </div>
                  </div>
                  
                  <div className="flex-1 min-w-0">
                    <div className="flex items-center gap-2 mb-1">
                      <h3 className="font-medium text-foreground">{report.title}</h3>
                      <Badge className={cn("text-xs", getReportTypeColor(report.type))}>
                        {getReportIcon(report.type)}
                        {report.type.toUpperCase()}
                      </Badge>
                    </div>
                    <p className="text-sm text-muted-foreground mb-2">{report.description}</p>
                    <div className="flex items-center gap-4 text-xs text-muted-foreground">
                      <div className="flex items-center gap-1">
                        <Calendar className="h-3 w-3" />
                        Generated: {new Date(report.generatedAt).toLocaleDateString()}
                      </div>
                    </div>
                  </div>
                  
                  <div className="flex-shrink-0">
                    <Button
                      onClick={() => handleDownload(report)}
                      disabled={downloading === report.id}
                      className="gap-2"
                      variant="outline"
                    >
                      <Download className={cn("h-4 w-4", downloading === report.id && "animate-pulse")} />
                      {downloading === report.id ? 'Downloading...' : 'Download'}
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      {/* Quick Actions */}
      <Card className="shadow-card">
        <CardHeader>
          <CardTitle>Generate New Report</CardTitle>
          <CardDescription>
            Create custom reports based on your requirements
          </CardDescription>
        </CardHeader>
        <CardContent>
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <Button variant="outline" className="h-24 flex-col gap-2">
              <FileText className="h-6 w-6" />
              <span className="text-sm">Daily Summary</span>
            </Button>
            <Button variant="outline" className="h-24 flex-col gap-2">
              <FileText className="h-6 w-6" />
              <span className="text-sm">Weekly Trends</span>
            </Button>
            <Button variant="outline" className="h-24 flex-col gap-2">
              <FileText className="h-6 w-6" />
              <span className="text-sm">Alert Analysis</span>
            </Button>
            <Button variant="outline" className="h-24 flex-col gap-2">
              <FileText className="h-6 w-6" />
              <span className="text-sm">Custom Report</span>
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}